import type { NextPage } from 'next'
import Head from 'next/head'
import { Form, Button } from 'react-bootstrap'
import React from 'react'
import {
    translateWord,
    getNumberOfWords,
    TranslationResult,
    addWord,
    NumberOfWords,
    deleteWord,
    translateText,
    TextTranslation,
    TextTranslationDto,
    deleteQuote,
    addQuote
} from '../library/api/querys'
import NavbarComponent from '../componets/navbar'
import Translations from '../componets/translations'
import { LanguageCodes } from '../Domain/Enums/LanguageCodes'
import LanguageSelector from '../componets/languageSelector'
import QuoteTranslations from '../componets/quoteTranslations'

interface Languages {
    From: LanguageCodes,
    To: LanguageCodes
}

const Home: NextPage = () => {
    const [word, setWord] = React.useState<string>("")
    const [translatedWord, setTranslatedWord] = React.useState<TranslationResult | null>(null)
    const [translatedQuote, setTranslatedQuote] = React.useState<TextTranslationDto | null>(null)
    const [numberOfWords, setNumberOfWords] = React.useState<NumberOfWords[] | null>(null)
    const [language, setLanguage] = React.useState<Languages>({
        From: LanguageCodes.SpanishSpain,
        To: LanguageCodes.EnglishUS
    })
    // const [translationLanguages, setTranslationLanguages] = React.useState<TranslationLanguages>({ from: languages.Spanish, to: languages.English })

    const translateInput = React.useRef<HTMLInputElement | null>()
    const focusInput = () => translateInput.current.focus()

    React.useEffect(() => {
        getNumberOfWords()
            .then(result => {
                setNumberOfWords(result)
            })

        focusInput()
    }, [])

    const translateWordCallback = async (): Promise<void> => {
        if (isQuote(word)){
            let result = await translateText(word, language.From, language.To)
            setTranslatedQuote(result)
        }
        else {
            let result = await translateWord(language.From, language.To, word)
            setTranslatedWord(result)
        }
    }

    const NumberOfWordsElement = () => {
        if (numberOfWords) {
            var numberSpanishWords = numberOfWords.filter(w => w.languageCode == LanguageCodes.SpanishSpain)[0]?.count
            var numberEnglishWords = numberOfWords.filter(w => w.languageCode == LanguageCodes.EnglishUS)[0]?.count

            return (
                <div style={localStyles.numberOfWords}>
                    {numberSpanishWords} different words have been translated to english and {numberEnglishWords} to spanish!
                </div>
            )
        }
    }

    const TranslatedWordElement = () => {
        if (translatedWord) {
            return (
                <div>
                    <div>The posible translations are:</div>

                    <Translations
                        translatedWord={translatedWord}
                        languages={language}
                    />

                    {
                        translatedWord.wordExists == true ?
                            <div>
                                <div>This word has already been searched</div>

                                <Button variant="danger" onClick={() => {
                                    deleteWord(translatedWord.wordGuid)
                                }}>Delete word</Button>
                            </div>
                            :
                            <Button onClick={() => {
                                addWord(language.From, word)
                            }}>Add word</Button>
                    }
                </div>
            )
        }

        if (translatedQuote) {
            return (
                <div>
                    <div>The possible translations are:</div>
                    
                    <QuoteTranslations translation={translatedQuote} />

                    {
                        translatedQuote.existInDb ?
                            <div>
                                <div>This quote has already been searched</div>

                                <Button variant="danger" onClick={() => {
                                    deleteQuote(translatedQuote.quoteId)
                                }}>Delete quote</Button>
                            </div>
                            :
                            <Button onClick={() => {
                                addQuote(language.From, word)
                            }}>Add word</Button>
                    }
                </div>
            )
        }
    }

    return (
        <>
            <Head>
                <title>Translate</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/translation.png" />
            </Head>

            <NavbarComponent />

            <main style={localStyles.mainElement}>
                <NumberOfWordsElement />

                <LanguageSelector
                    setLanguages={setLanguage}
                    focusInput={focusInput}
                />

                <Form
                    onSubmit={
                        (ev: any)  => {
                            ev.preventDefault()
                            setTranslatedWord(null)

                            translateWordCallback()
                        }
                    }
                    style={localStyles.form}
                >
                    <Form.Group className="mb-3" controlId="formBasicEmail">
                        <Form.Control
                            type="text"
                            placeholder={"Enter a word to translate"}
                            value={word}
                            ref={translateInput}
                            onChange={(ev: any) => setWord(ev.target.value.toLowerCase())}
                            autoComplete="off"
                            autoFocus
                        />
                    </Form.Group>

                    {/* <WordActions word={translatedWord} /> */}

                    <Button variant="primary" type="submit" style={localStyles.translateButton}>Translate</Button>
                    
                    <Button variant="primary" type="button" onClick={() => {
                        setWord("")
                        setTranslatedWord(null)
                        focusInput()
                    }}>Clear</Button>

                    <TranslatedWordElement />
                </Form>
            </main>
        </>
    )
}

const isQuote = (word: string) => word.trim().split(' ').length > 1

export default Home

export type {
    Languages
}

const localStyles = {
    numberOfWords: {
        marginBottom: "10px"
    },

    mainElement: {
        marginTop: "20px",
        paddingLeft: "20px",
        paddingRight: "20px"
    },

    translateButton: {
        marginRight: "10px"
    },

    form: {
        marginTop: "10px"
    }
}

