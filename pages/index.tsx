import type { NextPage } from 'next'
import Head from 'next/head'
import { Form, Button } from 'react-bootstrap'
import React from 'react'
import { 
    translateWord, 
    getNumberOfWords, 
    TranslationResult, 
    addWord, 
    NumberOfWordsResult
} from '../library/api/querys'
import NavbarComponent from '../componets/navbar'
import LanguageSelector, { Languages } from '../componets/languageSelector'

const Home: NextPage = () => {
	const [searchedWord, setSearchedWord] = React.useState<string>("")
	const [translatedWord, setTranslatedWord] = React.useState<TranslationResult | null>(null)
    const [numberOfWords, setNumberOfWords] = React.useState<NumberOfWordsResult | null>(null)
    const [language, setLanguage] = React.useState<Languages>(Languages.Spanish)

    const translateInput = React.useRef<HTMLInputElement | null>()
    const focusInput = () => translateInput.current.focus()

    React.useEffect(() => {
        getNumberOfWords()
            .then(result => {
                setNumberOfWords(result)})
    }, [])

	const translateWordCallback = async (): Promise<void> => {
		let result = await translateWord(language, searchedWord)

		setTranslatedWord(result)
	}

    const NumberOfWordsElement = () => {
        if (numberOfWords) {
            return (
                <div style={localStyles.numberOfWords}>
                    {numberOfWords.item1} different words have been translated to english and {numberOfWords.item2} to spanish!
                </div>
            )
        }
    }

    const GetInputPlaceholder = (): string => {
        switch (language) {
            case Languages.English:
                return "Translate word"
        
            case Languages.Spanish:
                return "Introduzca la palabra a traducir"
        }
    }

    const Translations = () => {
        if (translatedWord && translatedWord.queryResult) {
            return translatedWord.queryResult.translations.map(translation => {
                return <li key={translation.displayTarget}>{translation.displayTarget}</li>
            })
        }
    }

	const TranslatedWordElement = () => {
		if (translatedWord) {
            return (
                <div>
                    <div>The posible translations are:</div>
                    <ul>
                        {Translations()}
                    </ul>
                    
                    {
                        translatedWord.existsInDB == true ?
                            <div>This word has already been searched</div>
                            :
                            <Button onClick={() => {
                                // addWord(language, searchedWord)
                                //     .then(() => setNumberOfWords(numberOfWords + 1))
                            }}>Add word</Button>
                    }
                </div>
            )
        }
	}

	return (
		<>
			<Head>
				<title>Translate</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/translation.png" />
			</Head>

            <NavbarComponent />

			<main style={localStyles.mainElement}>
                <NumberOfWordsElement />

                <LanguageSelector 
                    setLanguage={setLanguage} 
                    focusInput={focusInput}
                />

				<Form 
                    onSubmit={
                        ev => {
                            ev.preventDefault()
                            translateWordCallback()
                        } 
                    }
                    style={localStyles.form}
                >
					<Form.Group className="mb-3" controlId="formBasicEmail">
						<Form.Control 
							type="text" 
							placeholder={GetInputPlaceholder()} 
							value={searchedWord}
                            ref={translateInput}
							onChange={ev => setSearchedWord(ev.target.value)}
                            autoComplete="off"
							autoFocus
						/>
					</Form.Group>

					<Button variant="primary" type="submit" style={localStyles.translateButton}>Translate</Button>
                    <Button variant="primary" type="button" onClick={() => {
                        setSearchedWord("")
                        setTranslatedWord(null)
                        focusInput()
                    }}>Clear</Button>

					<TranslatedWordElement />
				</Form>
			</main>
		</>
	)
}

const localStyles = {
    numberOfWords: {
        'marginBottom': "10px"
    },

    mainElement: {
        marginTop: "20px",
        paddingLeft: "20px",
        paddingRight: "20px"
    },

    translateButton: {
        marginRight: "10px"
    },

    form: {
        marginTop: "10px"
    }
}

export default Home
